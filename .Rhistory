for(i in seq_along(days)){
date=format(days[i],format="%Y-%m-%d")
games = get_games(date)
game_list[[i]] <- games
}
all_games = do.call(rbind, g)
all_games = all_games[!duplicated(all_games[,1]),]
all_games = na.omit(all_games)
return(all_games)
}
season_games = get_season_games("2021-07-20", "2021-10-01")
head(season_games)
get_pbp <- function(game_id){
pbp = read_html(paste0("https://www.espn.com/wnba/playbyplay/_/gameId/", game_id)) %>% html_nodes(".content") %>% html_table()
pbp_df = data.frame(pbp[[1]])
pbp_df$game_id = game_id
}
pbp_test = get_pbp("401230837")
head(pbp_test)
get_pbp <- function(game_id){
pbp = read_html(paste0("https://www.espn.com/wnba/playbyplay/_/gameId/", game_id)) %>% html_nodes(".content") %>% html_table()
pbp_df = data.frame(pbp[[1]])
pbp_df$game_id = game_id
return(pbp)
}
pbp_test = get_pbp("401230837")
head(pbp_test)
get_pbp <- function(game_id){
pbp = read_html(paste0("https://www.espn.com/wnba/playbyplay/_/gameId/", game_id)) %>% html_nodes(".content") %>% html_table()
pbp_df = data.frame(pbp[[1]])
pbp_df$game_id = game_id
return(pbp_df)
}
pbp_test = get_pbp("401230837")
head(pbp_test)
team = "Seattle Storm"
gsub(" ", "-", tolower(team))
url = "https://www.espn.com/wnba/teams"
teams_links = read_html(url) %>% html_nodes(".AnchorLink") %>% html_attr('href')
links = team_links[grepl('/wnba/team', team_links)]
links
links = team_links[grepl('/wnba/team/roster', team_links)]
links
url_team_name = "seattle-storm"
links[grepl(url_team_name), links]
links[grepl('seattle'), links]
links
links[grepl('seattle', links)]
rosters
url = "https://www.espn.com/wnba/teams"
teams_links = read_html(url) %>% html_nodes(".AnchorLink") %>% html_attr('href')
links = team_links[grepl('/wnba/team/roster', team_links)]
roster_team_url = links[grepl(url_team_name, links)]
team_name = sub(".*/", "", team_url)
team_name = gsub("-", " ", str_to_title(teams$team_name))
team_abbr = sub("/.*", "", team_url)
team_df = data.frame(roster)
team_df$team = team_name
team_df$abbr = team_abbr
team_df %>%
separate(Name,
into = c("name", "number"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
names(team_df) = c("name", "number", "position", "age", "height", "weight", "college", "team", "abbr")
team_df
roster_team_url = links[grepl(url_team_name, links)]
team_name = sub(".*/", "", team_url)
team_name = gsub("-", " ", str_to_title(teams$team_name))
team_abbr = sub("/.*", "", team_url)
team_df = data.frame(roster)
team_df$team = team_name
team_df$abbr = team_abbr
team_df %>%
separate(Name,
into = c("name", "number"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
names(team_df) = c("name", "number", "position", "age", "height", "weight", "college", "team", "abbr")
team_df
url = "https://www.espn.com/wnba/teams"
teams_links = read_html(url) %>% html_nodes(".AnchorLink") %>% html_attr('href')
links = team_links[grepl('/wnba/team/roster', team_links)]
roster_team_url = links[grepl(url_team_name, links)]
team_name = sub(".*/", "", team_url)
team_name = gsub("-", " ", str_to_title(teams$team_name))
team_abbr = sub("/.*", "", team_url)
team_df = data.frame(roster)
team_df$team = team_name
team_df$abbr = team_abbr
team_df = team_df %>%
separate(Name,
into = c("name", "number"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
names(team_df) = c("name", "number", "position", "age", "height", "weight", "college", "team", "abbr")
team_df
url = "https://www.espn.com/wnba/teams"
teams_links = read_html(url) %>% html_nodes(".AnchorLink") %>% html_attr('href')
links = team_links[grepl('/wnba/team/roster', team_links)]
roster_team_url = links[grepl(url_team_name, links)]
team_name = sub(".*/", "", roster_team_url)
team_name = gsub("-", " ", str_to_title(teams$team_name))
team_abbr = sub("/.*", "", roster_team_url)
team_df = data.frame(roster)
team_df$team = team_name
team_df$abbr = team_abbr
team_df = team_df %>%
separate(Name,
into = c("name", "number"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
names(team_df) = c("name", "number", "position", "age", "height", "weight", "college", "team", "abbr")
team_df
roster_team_url = links[grepl(url_team_name, links)]
roster_team_url
team_name
team_name = sub(".*/", "", roster_team_url)
team_name
team_name = gsub("-", " ", str_to_title(teams$team_name))
team_name
url = "https://www.espn.com/wnba/teams"
teams_links = read_html(url) %>% html_nodes(".AnchorLink") %>% html_attr('href')
links = team_links[grepl('/wnba/team/roster', team_links)]
roster_team_url = links[grepl(url_team_name, links)]
team_name = sub(".*/", "", roster_team_url)
team_name = gsub("-", " ", str_to_title(team_name))
team_abbr = sub("/.*", "", roster_team_url)
team_df = data.frame(roster)
team_df$team = team_name
team_df$abbr = team_abbr
team_df = team_df %>%
separate(Name,
into = c("name", "number"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
names(team_df) = c("name", "number", "position", "age", "height", "weight", "college", "team", "abbr")
team_df
team_abbr = sub("/.*", "", roster_team_url)
team_abbr
roster_team_url
team_abbr = sub("/.*", "", team_name_url)
team_name_url = sub(".*/", "", roster_team_url)
team_abbr = sub("/.*", "", team_name_url)
team_abbr
team_name_url
roster_team_url
team_abbr = sub(".*/name/", "", team_name_url)
team_abbr_clean = sub("/.*", "", team_abbr)
team_abbr_clean
team_abbr_clean = sub("*./", "", team_abbr)
team_abbr_clean
team_abbr
team_abbr = sub(".*/name/", "", team_name_url)
team_abbr
team_name_url
team_abbr = sub(".*/name/", "", roster_team_url)
team_abbr_clean = sub("/.*", "", team_abbr)
team_abbr_clean
get_current_team_roster <- function(team){
url_team_name = gsub(" ", "-", tolower(team))
url = "https://www.espn.com/wnba/teams"
teams_links = read_html(url) %>% html_nodes(".AnchorLink") %>% html_attr('href')
links = team_links[grepl('/wnba/team/roster', team_links)]
roster_team_url = links[grepl(url_team_name, links)]
team_name_url = sub(".*/", "", roster_team_url)
team_name = gsub("-", " ", str_to_title(team_name))
team_abbr = sub(".*/name/", "", roster_team_url)
team_abbr_clean = sub("/.*", "", team_abbr)
team_df = data.frame(roster)
team_df$team = team_name
team_df$abbr = team_abbr_clean
team_df = team_df %>%
separate(Name,
into = c("name", "number"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
names(team_df) = c("name", "number", "position", "age", "height", "weight", "college", "team", "abbr")
}
get_current_team_roster("Seattle Storm")
df = get_current_team_roster("Seattle Storm")
head(df)
df
get_current_team_roster <- function(team){
url_team_name = gsub(" ", "-", tolower(team))
url = "https://www.espn.com/wnba/teams"
teams_links = read_html(url) %>% html_nodes(".AnchorLink") %>% html_attr('href')
links = team_links[grepl('/wnba/team/roster', team_links)]
roster_team_url = links[grepl(url_team_name, links)]
team_name_url = sub(".*/", "", roster_team_url)
team_name = gsub("-", " ", str_to_title(team_name))
team_abbr = sub(".*/name/", "", roster_team_url)
team_abbr_clean = sub("/.*", "", team_abbr)
team_df = data.frame(roster)
team_df$team = team_name
team_df$abbr = team_abbr_clean
team_df = team_df %>%
separate(Name,
into = c("name", "number"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
names(team_df) = c("name", "number", "position", "age", "height", "weight", "college", "team", "abbr")
return(team_df)
}
df = get_current_team_roster("Seattle Storm")
df
stats_url = paste0("https://www.espn.com/wnba/team/stats/_/name/",team_abbr)
stats_html = read_html(stats_url)
stats = as.data.frame(stats_html %>% html_nodes(".remove_capitalize"))
stats = stats_html %>% html_nodes(".remove_capitalize")
stats
stats = stats_html %>% html_nodes(".remove_capitalize") %>% html_table()
stats
stats = stats_html %>% html_nodes(".Table__TD") %>% html_table()
stats
stats = stats_html %>% html_nodes(".Table__TD")
stats
stats[1]
html_text(stats)
html_table(stats)
html_text(stats)
stats = stats_html %>% html_nodes(".Table__TH")
html_text(stats)
stats_body = stats_html %>% html_nodes(".Table__TD") %>% html_text()
stats_body
b = stats_body[seq(1, length(stats_body), 16)]
b
b = stats_body[seq(1, length(stats_body), 17)]
b
b = stats_body[seq(1, length(stats_body), 16)]
b
b = stats_body[seq(1, length(stats_body), 15)]
b
b = stats_body[seq(1, length(stats_body), 16)]
b
stats_headers = stats_html %>% html_nodes("span") %>% html_text()
stats_headers
stats_body = stats_html %>% html_nodes(".Table__even") %>% html_text()
stats_body
stats_body = stats_html %>% html_nodes(".Table__even") %>% html_table()
stats_body
stats_body = stats_html %>% html_nodes(".Table") %>% html_text()
stats_body
data.frame(stats_body[[1]])
stats_body[1]
stats_body = stats_html %>% html_nodes(".Table") %>% html_table()
stats_body
stats_body[[1]]
data.frame(stats_body[[1]])
player_names = data.frame(stats_body[[1]])
player_stats = data.frame(stats_body[[2]])
player_shooting = data.frame(stats_body[[3]])
all_stats = cbind(player_names, player_stats)
all_stats
get_current_team_stats <- function(team_abbr){
stats_url = paste0("https://www.espn.com/wnba/team/stats/_/name/",team_abbr)
stats_html = read_html(stats_url)
stats_headers = stats_html %>% html_nodes(".Table__TH") %>% html_text()
stats_body = stats_html %>% html_nodes(".Table") %>% html_table()
player_names = data.frame(stats_body[[1]])
player_stats = data.frame(stats_body[[2]])
player_shooting = data.frame(stats_body[[3]])
all_stats = cbind(player_names, player_stats)
all_stats = cbind(all_stats, player_shooting)
return(all_stats)
}
stats = get_current_team_stats("sea")
stats
get_current_team_stats <- function(team_abbr){
stats_url = paste0("https://www.espn.com/wnba/team/stats/_/name/",team_abbr)
stats_html = read_html(stats_url)
stats_headers = stats_html %>% html_nodes(".Table__TH") %>% html_text()
stats_body = stats_html %>% html_nodes(".Table") %>% html_table()
player_names = data.frame(stats_body[[1]])
player_stats = data.frame(stats_body[[2]])
player_shooting = data.frame(stats_body[[4]])
all_stats = cbind(player_names, player_stats)
all_stats = cbind(all_stats, player_shooting)
return(all_stats)
}
stats
stats = get_current_team_stats("sea")
stats
cron_add(command = cmd, frequency = 'daily', at='8PM', id = 'epl-pool-fourth', ask = TRUE)
library(cronR)
setwd("~/projects/epl-pool/epl-pool")
cmd <- cron_rscript("scrape-21-22.R")
cmd
cron_add(command = cmd, frequency = 'daily', at='8PM', id = 'epl-pool-fourth', ask = TRUE)
cron_add(command = cmd, frequency = 'daily', at='8PM', id = 'epl-pool-fifth', ask = TRUE)
shiny::runApp()
runApp()
library(rvest)
library(cronR)
library(dplyr)
library(rsconnect)
#### Scrape Table ####
# load webpage
url = "https://www.premierleague.com/tables"
webpage = read_html(url)
# scrape table
#team names
teams_html = html_nodes(webpage, ".long")
teams = html_text(teams_html)
# rankings
rankings_html = html_nodes(webpage, ".value")
rankings = html_text(rankings_html)
# games played
gp_html = html_nodes(webpage, "td:nth-child(4)")
gp = html_text(gp_html)
# wins
wins_html = html_nodes(webpage, "td:nth-child(5)")
wins = html_text(wins_html)
# draws
draws_html = html_nodes(webpage, "td:nth-child(6)")
draws = html_text(draws_html)
# losses
losses_html = html_nodes(webpage, "td:nth-child(7)")
losses = html_text(losses_html)
# goals for
gf_html = html_nodes(webpage, "td:nth-child(8)")
gf = html_text(gf_html)
# goals against
ga_html = html_nodes(webpage, "td:nth-child(9)")
ga = html_text(ga_html)
# goal diff
gd_html = html_nodes(webpage, "td:nth-child(10)")
gd = html_text(gd_html)
# points
points_html = html_nodes(webpage, "td:nth-child(11)")
points = html_text(points_html)
# create table as a df
table = data.frame(rank = rankings,
team = teams,
games_played = gp,
wins = wins,
losses = losses,
draws = draws,
goals_for = gf,
goals_against = ga,
goal_diff = gd,
points = points)
row.names(table) = NULL
# clean up table
table$goal_diff = gsub("\n", "", table$goal_diff)
# drop championship teaams
epl_table = table[-c(21:80),]
# format table
epl_table = epl_table %>%
mutate_at(c("rank", "games_played", "wins", "losses", "draws", "goals_for", "goals_against", "goal_diff", "points"), as.character) %>%
mutate_at(c("rank", "games_played", "wins", "losses", "draws", "goals_for", "goals_against", "goal_diff", "points"), as.numeric) %>%
mutate_at(c("team"), as.character())
# order table by rank
epl_table = epl_table[order(epl_table$rank),]
##### Draft Results ####
# draft results
owners = c("Jason", "Casey", "Megan", "CB", "Neo")
# jason teams
#jason_teams20/21 = c("Manchester City", "Southampton", "Leeds United", "West Bromwich Albion")
jason_teams = c("Liverpool", "Tottenham Hotspur", "Wolverhampton Wanderers", "Brentford")
jteams_str = paste( unlist(jason_teams), collapse=', ')
# casey teams
#casey_teams20/21 = c("Liverpool", "Everton", "Sheffield United", "Fulham")
casey_teams = c("Manchester City", "Leeds United", "Everton", "Watford")
cteams_str = paste( unlist(casey_teams), collapse=', ')
# megan teams
#megan_teams20/21 = c("Chelsea", "Arsenal", "West Ham United", "Crystal Palace")
megan_teams = c("Leicester City", "West Ham United", "Crystal Palace", "Burnley")
mteams_str = paste( unlist(megan_teams), collapse=', ')
# cb teams
#cb_teams20/21 = c("Manchester United", "Wolverhampton Wanderers", "Burnley", "Brighton and Hove Albion")
cb_teams = c("Chelsea", "Aston Villa", "Brighton and Hove Albion", "Norwich City")
cbteams_str = paste( unlist(cb_teams), collapse=', ')
# neo teams
#neo_teams20/21 = c("Leicester City", "Tottenham Hotspur", "Newcastle United", "Aston Villa")
neo_teams = c("Manchester United", "Arsenal", "Southampton", "Newcastle United")
nteams_str = paste( unlist(neo_teams), collapse=', ')
# create new table
epl_table$owner = ""
# populate table with owner of each team
epl_table[epl_table$team %in% jason_teams,]$owner <- "Jason"
epl_table[epl_table$team %in% casey_teams,]$owner <- "Casey"
epl_table[epl_table$team %in% megan_teams,]$owner <- "Megan"
epl_table[epl_table$team %in% cb_teams,]$owner <- "CB"
epl_table[epl_table$team %in% neo_teams,]$owner <- "Neo"
# group by owner and sum points to create owner table
otable = epl_table %>%
group_by(owner) %>%
summarise(points = sum(points))
# order table by points
otable = data.frame(otable[order(otable$points, decreasing = T),])
epl_table$owner[epl_table$owner == "Neo"] <- "Neo ⭐"
otable$owner[otable$owner == "Neo"] <- "Neo ⭐"
epl_table$owner[epl_table$owner == "Megan"] <- "Megan ⭐"
otable$owner[otable$owner == "Megan"] <- "Megan ⭐"
# reformat headings
names(epl_table) = c("Rank", "Team", "GP", "W", "L", "D", "GF", "GA", "GD", "Points")
names(otable) = c("Manager", "Points")
setwd("~/projects/ep-pool/epl-pool")
write.csv(epl_table, "epl_table.csv")
write.csv(otable, "owner_table.csv")
deployApp(forceUpdate = TRUE)
library(rvest)
library(cronR)
library(dplyr)
library(rsconnect)
#### Scrape Table ####
# load webpage
url = "https://www.premierleague.com/tables"
webpage = read_html(url)
# scrape table
#team names
teams_html = html_nodes(webpage, ".long")
teams = html_text(teams_html)
# rankings
rankings_html = html_nodes(webpage, ".value")
rankings = html_text(rankings_html)
# games played
gp_html = html_nodes(webpage, "td:nth-child(4)")
gp = html_text(gp_html)
# wins
wins_html = html_nodes(webpage, "td:nth-child(5)")
wins = html_text(wins_html)
# draws
draws_html = html_nodes(webpage, "td:nth-child(6)")
draws = html_text(draws_html)
# losses
losses_html = html_nodes(webpage, "td:nth-child(7)")
losses = html_text(losses_html)
# goals for
gf_html = html_nodes(webpage, "td:nth-child(8)")
gf = html_text(gf_html)
# goals against
ga_html = html_nodes(webpage, "td:nth-child(9)")
ga = html_text(ga_html)
# goal diff
gd_html = html_nodes(webpage, "td:nth-child(10)")
gd = html_text(gd_html)
# points
points_html = html_nodes(webpage, "td:nth-child(11)")
points = html_text(points_html)
# create table as a df
table = data.frame(rank = rankings,
team = teams,
games_played = gp,
wins = wins,
losses = losses,
draws = draws,
goals_for = gf,
goals_against = ga,
goal_diff = gd,
points = points)
row.names(table) = NULL
# clean up table
table$goal_diff = gsub("\n", "", table$goal_diff)
# drop championship teaams
epl_table = table[-c(21:80),]
# format table
epl_table = epl_table %>%
mutate_at(c("rank", "games_played", "wins", "losses", "draws", "goals_for", "goals_against", "goal_diff", "points"), as.character) %>%
mutate_at(c("rank", "games_played", "wins", "losses", "draws", "goals_for", "goals_against", "goal_diff", "points"), as.numeric) %>%
mutate_at(c("team"), as.character())
# order table by rank
epl_table = epl_table[order(epl_table$rank),]
##### Draft Results ####
# draft results
owners = c("Jason", "Casey", "Megan", "CB", "Neo")
# jason teams
#jason_teams20/21 = c("Manchester City", "Southampton", "Leeds United", "West Bromwich Albion")
jason_teams = c("Liverpool", "Tottenham Hotspur", "Wolverhampton Wanderers", "Brentford")
jteams_str = paste( unlist(jason_teams), collapse=', ')
# casey teams
#casey_teams20/21 = c("Liverpool", "Everton", "Sheffield United", "Fulham")
casey_teams = c("Manchester City", "Leeds United", "Everton", "Watford")
cteams_str = paste( unlist(casey_teams), collapse=', ')
# megan teams
#megan_teams20/21 = c("Chelsea", "Arsenal", "West Ham United", "Crystal Palace")
megan_teams = c("Leicester City", "West Ham United", "Crystal Palace", "Burnley")
mteams_str = paste( unlist(megan_teams), collapse=', ')
# cb teams
#cb_teams20/21 = c("Manchester United", "Wolverhampton Wanderers", "Burnley", "Brighton and Hove Albion")
cb_teams = c("Chelsea", "Aston Villa", "Brighton and Hove Albion", "Norwich City")
cbteams_str = paste( unlist(cb_teams), collapse=', ')
# neo teams
#neo_teams20/21 = c("Leicester City", "Tottenham Hotspur", "Newcastle United", "Aston Villa")
neo_teams = c("Manchester United", "Arsenal", "Southampton", "Newcastle United")
nteams_str = paste( unlist(neo_teams), collapse=', ')
# create new table
epl_table$owner = ""
# populate table with owner of each team
epl_table[epl_table$team %in% jason_teams,]$owner <- "Jason"
epl_table[epl_table$team %in% casey_teams,]$owner <- "Casey"
epl_table[epl_table$team %in% megan_teams,]$owner <- "Megan"
epl_table[epl_table$team %in% cb_teams,]$owner <- "CB"
epl_table[epl_table$team %in% neo_teams,]$owner <- "Neo"
# group by owner and sum points to create owner table
otable = epl_table %>%
group_by(owner) %>%
summarise(points = sum(points))
# order table by points
otable = data.frame(otable[order(otable$points, decreasing = T),])
epl_table$owner[epl_table$owner == "Neo"] <- "Neo ⭐"
otable$owner[otable$owner == "Neo"] <- "Neo ⭐"
epl_table$owner[epl_table$owner == "Megan"] <- "Megan ⭐"
otable$owner[otable$owner == "Megan"] <- "Megan ⭐"
# reformat headings
names(epl_table) = c("Rank", "Team", "GP", "W", "L", "D", "GF", "GA", "GD", "Points", "Manager")
names(otable) = c("Manager", "Points")
setwd("~/projects/ep-pool/epl-pool")
write.csv(epl_table, "epl_table.csv")
write.csv(otable, "owner_table.csv")
deployApp(forceUpdate = TRUE)
